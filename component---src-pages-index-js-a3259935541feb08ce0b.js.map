{"version":3,"file":"component---src-pages-index-js-a3259935541feb08ce0b.js","mappings":"mMAIe,SAASA,EAAT,GAAuD,EAAjCC,GAAkC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,QAE3D,OACC,uBAAKC,UAAU,cACd,gBAAC,EAAAC,KAAD,CAAMC,GAAIL,GACT,wBAAMG,UAAU,oBACdF,EAAYK,OAAS,wBAAMH,UAAU,aAAhB,YAA6CF,EAAYM,QAGjF,uBAAKJ,UAAU,yBACd,gBAAC,IAAD,CAAaF,YAAaA,EAAaO,UAAQ,KAEhD,qBAAGL,UAAU,iBAAiBD,M,wHCXlB,SAASO,IAUvB,IARA,IAEMC,EAAY,IACZC,EAAa,IAIbC,EAAW,IAAIC,MAAM,IAClBC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IACpCF,EAASE,GAAK,CAACE,EAAG,CAAC,IAAK,EAAGL,IAE5BC,EAASK,OAAO,EAAG,EAClB,CACCC,EAAG,CAAC,IAAM,KAAoC,MAC9CF,EAAG,CAAC,IAAK,EAAGL,IAEb,CACCO,EAAG,CAAC,IAAM,KAA8B,MACxCF,EAAG,CAAC,IAAK,IAA0B,MAEpC,CACCA,EAAG,CAAC,IAAK,IAA0B,MAEpC,CACCE,EAAG,CAAC,IAAM,KAA0C,MACpDF,EAAG,CAAC,IAAK,IAA0B,MAEpC,CACCE,EAAG,CAAC,IAAM,KAAoC,MAC9CF,EAAG,CAAC,IAAK,EAAGL,KAId,IACMQ,EAAMN,MAAMO,KAAK,IAAIP,MADV,IAC2B,SAACK,EAAGJ,GAAJ,OAAUA,KAChDO,EAAyB,IAAhBC,KAAKC,SACdC,EAAyB,IAAhBF,KAAKC,SAEpB,EAAkBE,EAAAA,SAAe,GAA1BP,EAAP,KAAUQ,EAAV,KAEAD,EAAAA,WAAgB,WACf,IAAME,EAAWC,aAAY,WAC5BF,GAAK,SAAAR,GAAC,OAAII,KAAKC,cACb,KACH,OAAO,kBAAMM,cAAcF,MACzB,IAEH,IAAMG,EAAUX,EAAIY,KAAI,SAAAb,GACvB,MAAO,CAACc,KAAM,cAAeC,OAAO,QAAQZ,EAASH,EAfrC,EAegD,KAA7B,eAAgDgB,YAA2B,EAAdZ,KAAKC,aAEhGY,EAAUhB,EAAIY,KAAI,SAAAb,GACvB,MAAO,CAACc,KAAM,cAAeC,OAAO,QAAQT,EAASN,EAlBrC,EAkBgD,KAA7B,eAAgDgB,YAA2B,EAAdZ,KAAKC,aAEhGa,EAASN,EAAQO,OAAOF,GAG9B,OACC,uBAAKhC,UAAU,QACd,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KACR,uBAAKF,UAAU,cAAf,aAID,uBAAKA,UAAU,kBACd,uBAAKA,UAAU,QACb,gBAAC,IAAD,CAAamC,MAAO5B,EAAW6B,OAAQ5B,EAClC6B,QAAS,CAACC,SAAUA,GACfC,YAAa,GACbC,SAAUP,GAEfxB,SAAUA,EACVT,UAAW,YAAayC,KAAM1B,O,cCtE1B,SAAS2B,EAAT,GAA0B,IAElCC,EAFiC,EAARC,KAE6BC,iBAE5D,OACC,gBAACC,EAAA,EAAD,KACC,gBAACC,EAAA,EAAD,MACA,4BAEA,uBAAK/C,UAAU,WACd,gBAACM,EAAD,MACA,uBAAKV,GAAG,sBACP,+CAGC+C,EAAOK,MAAMpB,KAAI,SAAAqB,GAAI,OACpB,gBAACtD,EAAA,EAAD,CACCuD,IAAKD,EAAKrD,GACVC,KAAMoD,EAAKE,OAAOtD,KAClBC,YAAamD,EAAKnD,YAClBC,QAASkD,EAAKlD,aAEhB4C,EAAOS,WAAa,GACpB,2BACC,gBAAC,EAAAnD,KAAD,CAAMC,GAAG,SAAT,WAA0ByC,EAAOS,WAAjC","sources":["webpack://arts-random-thoughts/./src/components/PostExcerpt.js","webpack://arts-random-thoughts/./src/components/Wave/index.js","webpack://arts-random-thoughts/./src/pages/index.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport PostDetails from \"../components/PostDetails\"\n\nexport default function PostExcerpt({id, slug, frontmatter, excerpt}) {\n\n\treturn(\n\t\t<div className=\"index-post\">\n\t\t\t<Link to={slug}>\n\t\t\t\t<span className=\"index-post-title\">\n\t\t\t\t\t{frontmatter.draft && <span className=\"tag-draft\">[Draft] </span>}{frontmatter.title}\n\t\t\t\t</span>\n\t\t\t</Link>\n\t\t\t<div className=\"post-details-in-index\">\n\t\t\t\t<PostDetails frontmatter={frontmatter} showTags />\n\t\t\t</div>\n\t\t\t<p className=\"index-excerpt\">{excerpt}</p>\n\t\t</div>\n\t)\n\n}","import React from \"react\"\nimport { RandomHLine } from \"react-random-shapes\"\nimport \"./Wave.scss\"\nimport { Link } from \"gatsby\"\n\nexport default function Wave() {\n\n\tconst xWidth = 2000\n\tconst contentWidth = 840\n\tconst waveWidth = 10000\n\tconst waveHeight = 1000\n\tconst midHeight = 50\n\tconst windowWidth = 150\n\n\tconst override = new Array(17)\n\tfor (let i = 0; i < override.length; i ++)\n\t\toverride[i] = {y: [\"r\", 0, waveHeight]}\n\n\toverride.splice(6, 5,\n\t\t{\n\t\t\tx: [\"r\", ((waveWidth-xWidth)/2)-windowWidth, ((waveWidth-xWidth)/2)+windowWidth],\n\t\t\ty: [\"r\", 0, waveHeight]\n\t\t},\n\t\t{\n\t\t\tx: [\"r\", ((waveWidth-contentWidth)/2), ((waveWidth-contentWidth)/2)+windowWidth],\n\t\t\ty: [\"r\", (waveHeight-midHeight)/2, (waveHeight+midHeight)/2]\n\t\t},\n\t\t{\n\t\t\ty: [\"r\", (waveHeight-midHeight)/2, (waveHeight+midHeight)/2]\n\t\t},\n\t\t{\n\t\t\tx: [\"r\", ((waveWidth+contentWidth)/2)-windowWidth, ((waveWidth+contentWidth)/2)],\n\t\t\ty: [\"r\", (waveHeight-midHeight)/2, (waveHeight+midHeight)/2]\n\t\t},\n\t\t{\n\t\t\tx: [\"r\", ((waveWidth+xWidth)/2)-windowWidth, ((waveWidth+xWidth)/2)+windowWidth],\n\t\t\ty: [\"r\", 0, waveHeight]\n\t\t}\n\t)\n\n\tconst numLines = 5\n\tconst rng = Array.from(new Array(numLines), (x, i) => i)\n\tconst startA = Math.random() * 360\n\tconst startB = Math.random() * 360\n\n\tconst [x, setX] = React.useState(0)\n\n\tReact.useEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetX(x => Math.random())\n\t\t}, 30000)\n\t\treturn () => clearInterval(interval)\n\t}, [])\n\n\tconst stylesA = rng.map(x => {\n\t\treturn {fill: \"transparent\", stroke: `hsl(${startA + x/numLines*360}, 100%, 30%)`, strokeWidth: Math.random()*2}\n\t})\n\tconst stylesB = rng.map(x => {\n\t\treturn {fill: \"transparent\", stroke: `hsl(${startB + x/numLines*360}, 100%, 70%)`, strokeWidth: Math.random()*2}\n\t})\n\tconst styles = stylesA.concat(stylesB)\n\t// console.log(styles)\n\n\treturn (\n\t\t<div className=\"hero\">\n\t\t\t<Link to=\"/\">\n\t\t\t\t<div className=\"wave-title\">\n\t\t\t\t\tWelcome!\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t\t<div className=\"wave-container\">\n\t\t\t\t<div className=\"wave\">\n\t\t\t\t\t\t<RandomHLine width={waveWidth} height={waveHeight}\n\t\t\t\t\t\t\t\t\t\t options={{numLines: numLines*2,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t numControls: 17,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t styleMid: styles,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t }}\n\t\t\t\t\t\t\t\t\t\t override={override} \n\t\t\t\t\t\t\t\t\t\t className={\"wave-line\"} misc={x}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n\n\t// return(\n\t// \t<div className=\"wave-all\">\n\t// \t\t{/*<Link to=\"/\">\n\t// \t\t\t<div className=\"wave-title\">\n\t// \t\t\t\tWelcome!\n\t// \t\t\t</div>\n\t// \t\t</Link>*/}\n\t// \t\t<div className=\"full-width\">\n\t// \t\t\t<div className=\"wave-container\">\n\t// \t\t\t{\n\t// \t\t\t\t[...Array(numLines).keys()].map(i => {\n\t// \t\t\t\t\treturn( \n\t// \t\t\t\t\t\t<React.Fragment key={\"z\" + String(i)}>\n\t// \t\t\t\t\t\t\t<RandomHLine width={waveWidth} height={waveHeight} key={\"a\" + String(i)}\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t options={{numControls: 17,\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t styleMid: {fill: \"transparent\",\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\tstroke: `hsl(${startA + i/numLines*360}, 100%, 30%)`,\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\tstrokeWidth: Math.random()*2},\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t }}\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t override={override}\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t className=\"wave\" />\n\t// \t\t\t\t\t\t\t<RandomHLine width={waveWidth} height={waveHeight} key={\"b\" + String(i)}\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t options={{numControls: 17,\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t styleMid: {fill: \"transparent\",\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\tstroke: `hsl(${startB + i/numLines*360}, 100%, 30%)`,\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t \t\t\t\t\t \t\t\t\t\t\tstrokeWidth: Math.random()*2},\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t }}\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t override={override}\n\t// \t\t\t\t\t\t\t\t\t\t\t\t\t className=\"wave\" />\n\t// \t\t\t\t\t\t</React.Fragment>\n\t// \t\t\t\t\t)\n\t// \t\t\t\t})\n\t// \t\t\t}\n\t// \t\t\t</div>\n\t// \t\t</div>\n\t// \t</div>\n\t// )\n\n}\n\n\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport PostExcerpt from \"../components/PostExcerpt\"\nimport Wave from \"../components/Wave\"\nimport SEO from \"../components/SEO\"\nimport \"../styles/post.scss\"\n\nexport default function Index({ data }) {\n\n\tconst qPosts = process.env.NODE_ENV === \"production\" ? data.qPostsProduction : data.qPostsDevelopment\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO />\n\t\t\t<div />\n\n\t\t\t<div className=\"content\">\n\t\t\t\t<Wave />\n\t\t\t\t<div id=\"index-latest-posts\">\n\t\t\t\t\t<h1>\n\t\t\t\t\t\tLatest blog posts\n\t\t\t\t\t</h1>\n\t\t\t\t\t{qPosts.nodes.map(node => (\n\t\t\t\t\t\t\t<PostExcerpt\n\t\t\t\t\t\t\t\tkey={node.id}\n\t\t\t\t\t\t\t\tslug={node.fields.slug}\n\t\t\t\t\t\t\t\tfrontmatter={node.frontmatter}\n\t\t\t\t\t\t\t\texcerpt={node.excerpt} />\n\t\t\t\t\t))}\n\t\t\t\t\t{qPosts.totalCount > 5 &&\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Link to=\"/blog\">See all {qPosts.totalCount} posts</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t{/*\n\t\t\t\t<div id=\"index-projects\">\n\t\t\t\t\t<h1>\n\t\t\t\t\t\tProjects\n\t\t\t\t\t</h1>\n\n\t\t\t\t</div>*/}\n\t\t\t</div>\n\t\t</Layout>\n\t)\n}\n\nexport const postQuery = graphql`\n\tquery latestPosts {\n\t\tqPostsProduction: allMdx(filter: {fields: {collection: {eq: \"posts\"}}, frontmatter: {draft: {ne: true}}},\n\t\t\t\t\t\t\t sort: { fields: [frontmatter___date], order: DESC },\n\t\t\t\t\t\t\t limit: 5) {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\texcerpt(truncate: true)\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\tdate(formatString: \"YYYY.MM.DD\")\n\t\t\t\t\ttags\n\t\t\t\t}\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t}\n\t\t\ttotalCount\n\t\t}\n\t\tqPostsDevelopment: allMdx(filter: {fields: {collection: {eq: \"posts\"}}},\n\t\t\t\t\t\t\t sort: { fields: [frontmatter___date], order: DESC },\n\t\t\t\t\t\t\t limit: 5) {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\texcerpt(truncate: true)\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\tdate(formatString: \"YYYY.MM.DD\")\n\t\t\t\t\ttags\n\t\t\t\t\tdraft\n\t\t\t\t}\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t}\n\t\t\ttotalCount\n\t\t}\n\t}\n`"],"names":["PostExcerpt","id","slug","frontmatter","excerpt","className","Link","to","draft","title","showTags","Wave","waveWidth","waveHeight","override","Array","i","length","y","splice","x","rng","from","startA","Math","random","startB","React","setX","interval","setInterval","clearInterval","stylesA","map","fill","stroke","strokeWidth","stylesB","styles","concat","width","height","options","numLines","numControls","styleMid","misc","Index","qPosts","data","qPostsProduction","Layout","SEO","nodes","node","key","fields","totalCount"],"sourceRoot":""}